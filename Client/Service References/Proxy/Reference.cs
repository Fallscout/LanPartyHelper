//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LanPartyUtility.Client.Proxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://fallscout.com", ConfigurationName="Proxy.ILobbyManager", CallbackContract=typeof(LanPartyUtility.Client.Proxy.ILobbyManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fallscout.com/ILobbyManager/Connect", ReplyAction="http://fallscout.com/ILobbyManager/ConnectResponse")]
        int Connect(LanPartyUtility.Common.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fallscout.com/ILobbyManager/Connect", ReplyAction="http://fallscout.com/ILobbyManager/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(LanPartyUtility.Common.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fallscout.com/ILobbyManager/Disconnect")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fallscout.com/ILobbyManager/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fallscout.com/ILobbyManager/RefreshPlayerList")]
        void RefreshPlayerList(LanPartyUtility.Common.Player[] players);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : LanPartyUtility.Client.Proxy.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<LanPartyUtility.Client.Proxy.ILobbyManager>, LanPartyUtility.Client.Proxy.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(LanPartyUtility.Common.Player player) {
            return base.Channel.Connect(player);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(LanPartyUtility.Common.Player player) {
            return base.Channel.ConnectAsync(player);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
    }
}
